# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CsvtoMAp
                                 A QGIS plugin
 This plugin imports .csv files and creates .shp files based on the treshold values and prefed colour coding and legends for the forecast of IMD data.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-10-01
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Ashish
        email                : ashishjain202027@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from qgis.core import QgsProject
from qgis.PyQt.QtGui import (QColor)
from qgis.PyQt.QtCore import Qt, QRectF
import processing, tempfile
from qgis.core import *
from qgis.PyQt.QtCore import (
    QPointF,
    QRectF,
    QSize,
)
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
import sys 
import time
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .csv_to_map_dialog import CsvtoMApDialog
import os.path
import os
from qgis.utils import iface
from datetime import date, timedelta

class CsvtoMAp:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.
        
        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'CsvtoMAp_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&csv to Map')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.second_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('CsvtoMAp', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/csv_to_map/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Convert csv to map'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
        self.second_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&csv to Map'),
                action)
            self.iface.removeToolBarIcon(action)

    def select_input_file(self):
        filename,_filter = QFileDialog.getOpenFileName(self.dlg,"Select Input File","",'*.shp') 
        self.dlg.lineEdit.setText(filename)
 
    def select_input_file2(self):
        filename2,_filter = QFileDialog.getOpenFileName(self.dlg,"Select Input File","",'*.csv') 
        self.dlg.lineEdit_2.setText(filename2)

    def select_input_file3(self):
        filename3,_filter = QFileDialog.getOpenFileName(self.dlg,"","",) 
        self.dlg.lineEdit_3.setText(filename3)
        
    def select_input_file4(self):
        filename4,_filter = QFileDialog.getOpenFileName(self.dlg,"Select Input File","",'*.png') 
        self.dlg.lineEdit_4.setText(filename4)
  
    def select_output_file(self):
        filename5,_filter = QFileDialog.getSaveFileName(self.dlg,"Select Output File","",'*.pdf') 
        self.dlg.lineEdit_5.setText(filename5)

    def run(self):
        """Run method that performs all the real work"""
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = CsvtoMApDialog()
            self.dlg.pushButton.clicked.connect(self.select_input_file)
            self.dlg.pushButton_2.clicked.connect(self.select_input_file2)
            self.dlg.pushButton_3.clicked.connect(self.select_input_file4)
            self.dlg.pushButton_4.clicked.connect(self.select_output_file)
            self.dlg.comboBox_2.addItems(["","Rainfall","Maximum Temperature","Minimum Temperature","Forecast Day 1","Forecast Day 2","Forecast Day 3","Forecast Day 4","Forecast Day 5","Warning Day 1","Warning Day 2","Warning Day 3","Warning Day 4","Warning Day 5","Highway Forecast"])
            
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop

        result = self.dlg.exec_()
        # See if OK was pressed
        if result :
             # Do something useful here - delete the line containing pass and
            # substitute with your code
            inputShp = self.dlg.lineEdit.text()
            inputCsv = self.dlg.lineEdit_2.text()
            inputHead = self.dlg.lineEdit_3.text()
            inputLogo = self.dlg.lineEdit_4.text()
            outputMAp = self.dlg.lineEdit_5.text()
            dropdown = self.dlg.comboBox_2.currentText()
            #Input shp File

            vlayer = QgsVectorLayer(inputShp, "Districts", "ogr")
            QgsProject.instance().addMapLayer(vlayer)
            
            #Input CSV File

            uri = "file:///" + inputCsv + "?delimiter=,"
            csvlayer = QgsVectorLayer(uri, "csv_file", "delimitedtext")
            QgsProject.instance().addMapLayer(csvlayer)

            #shp & csv layer join

            csvField = 'OBJECTID'
            shpField = 'OBJECTID'
            joinObject = QgsVectorLayerJoinInfo()
            joinObject.setJoinFieldName(csvField)
            joinObject.setTargetFieldName(shpField)
            joinObject.setJoinLayerId(csvlayer.id())
            joinObject.setUsingMemoryCache(True)
            joinObject.setJoinLayer(csvlayer)
            vlayer.addJoin(joinObject)

#Rainfall/////////////////////////////////////////////////////////////////////////////////////////

            if dropdown == "Rainfall": 

                    for layer in QgsProject.instance().mapLayers().values():

                        layer_settings  = QgsPalLayerSettings()
                        text_format = QgsTextFormat()
                        text_format.setFont(QFont("Arial", 6))
                        text_format.setSize(6)

                        buffer_settings = QgsTextBufferSettings()
                        buffer_settings.setEnabled(True)
                        buffer_settings.setSize(0)
                        buffer_settings.setColor(QColor("black"))
                        text_format.setBuffer(buffer_settings)

                        layer_settings.setFormat(text_format) 
                        layer_settings.isExpression = True
                        layer_settings.fieldName = "KGISDist_1 || '\n' || csv_file_rainfall"
                        layer_settings.placement = 4
                        layer_settings.enabled = True
                        layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                        layer.setLabelsEnabled(True)
                        layer.setLabeling(layer_settings)
                        layer.triggerRepaint()
                       
                        # Adding categories based on attribute table

                        categorized_renderer = QgsCategorizedSymbolRenderer()
                        target_field = 'csv_file_rainfall'
                        myRangeList = []

                        symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())     
                        symbol.setColor(QColor("#FFFFFF"))
                        myRange = QgsRendererRange(0, 0, symbol, '(No Rain) - Dry')                   
                        myRangeList.append(myRange)                                     

                        symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                        symbol.setColor(QColor("#229954"))
                        myRange = QgsRendererRange(0, 15.5, symbol, '(Trace-15.5mm) - Light Rainfall')
                        myRangeList.append(myRange)

                        symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                        symbol.setColor(QColor("#5DADE2"))
                        myRange = QgsRendererRange(15.6, 64.4, symbol, '(15.6mm-64.4mm) - Moderate Rainfall')
                        myRangeList.append(myRange)

                        symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                        symbol.setColor(QColor("#FFC300"))
                        myRange = QgsRendererRange(64.5, 115.5, symbol, '(64.5mm-115.5mm) - Heavy Rainfall')
                        myRangeList.append(myRange)

                        symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                        symbol.setColor(QColor("#F39C12"))
                        myRange = QgsRendererRange(115.6, 204.4, symbol, '(115.6mm-204.4mm) - Very Heavy Rainfall')
                        myRangeList.append(myRange)

                        symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                        symbol.setColor(QColor("#C0392B"))
                        myRange = QgsRendererRange(204.5, 900.0, symbol, '(Greater or Equal to 204.5mm) - Extremely Heavy Rainfall')
                        myRangeList.append(myRange)

                        myRenderer = QgsGraduatedSymbolRenderer(target_field, myRangeList)  
                        myRenderer.setMode(QgsGraduatedSymbolRenderer.Custom)               
                        vlayer.setRenderer(myRenderer)                                  

                        #create project layout

                        layers = QgsProject.instance().mapLayersByName('Districts')
                        layer = layers[0]
                        project = QgsProject.instance()
                        manager = project.layoutManager()
                        layoutName = 'Layout1'
                        layouts_list = manager.printLayouts()

                        # remove any duplicate layouts
                        
                        for layout in layouts_list:
                            if layout.name() == layoutName:
                                manager.removeLayout(layout)
                        layout = QgsPrintLayout(project)
                        layout.initializeDefaults()
                        layout.setName(layoutName)
                        manager.addLayout(layout)

                        # create map item in the layout
                        
                        map = QgsLayoutItemMap(layout)
                        map.setRect(20, 20, 20, 20)

                        # set the map extent

                        ms = QgsMapSettings()
                        ms.setLayers([layer]) 
                        rect = QgsRectangle(ms.fullExtent())
                        rect.scale(1.70)
                        ms.setExtent(rect)
                        map.setExtent(rect)
                       # map.setBackgroundColor(QColor("#FDFEFE"))
                        layout.addLayoutItem(map)
                        map.attemptMove(QgsLayoutPoint(55, 20, QgsUnitTypes.LayoutMillimeters))
                        map.attemptResize(QgsLayoutSize(180, 180, QgsUnitTypes.LayoutMillimeters))

                        # create legend in the layout

                        legend = QgsLayoutItemLegend(layout)
                        legend.setTitle("Legend")
                        layerTree = QgsLayerTree()
                        layerTree.addLayer(layer)
                        legend.model().setRootGroup(layerTree)
                        layout.addLayoutItem(legend)
                        legend.attemptMove(QgsLayoutPoint(175, 70, QgsUnitTypes.LayoutMillimeters))
                        legend.attemptResize(QgsLayoutSize(105, 55, QgsUnitTypes.LayoutMillimeters))
                        #legend.setBackgroundColor(QColor("#FDFEFE"))

                        # create logo in the layout
                       
                        logo = QgsLayoutItemPicture(layout)
                        logo.setPicturePath(inputLogo)
                        layout.addLayoutItem(logo)
                        logo.attemptResize(QgsLayoutSize(60,60,QgsUnitTypes.LayoutMillimeters))
                        logo.attemptMove(QgsLayoutPoint(15,5,QgsUnitTypes.LayoutMillimeters))

                        # create North Arrow in the layout

                        arrow = QgsLayoutItemPicture(layout)
                        path = QgsApplication.qgisSettingsDirPath()
                        path3 = os.path.join(path,"python/plugins/csv_to_map/arrows/","NorthArrow_11.svg")
                        arrow.setPicturePath(path3)
                        arrow.attemptResize(QgsLayoutSize(20,40,QgsUnitTypes.LayoutMillimeters))
                        arrow.attemptMove(QgsLayoutPoint(250,10,QgsUnitTypes.LayoutMillimeters))
                        layout.addLayoutItem(arrow)

                        # create title in the layout
                
                        title = QgsLayoutItemLabel(layout)
                        title.setText(inputHead + "District wise Rainfall of Karnataka State valid from " +str((date.today() - timedelta(1)).strftime('%d.%m.%Y'))+" : 0830 IST to "+str(date.today().strftime('%d.%m.%Y')) +" : 0830 IST")
                        title.setFont(QFont('Arial', 14))
                        title.adjustSizeToText()
                        layout.addLayoutItem(title)
                        title.attemptResize(QgsLayoutSize(120,50,QgsUnitTypes.LayoutMillimeters))
                        title.attemptMove(QgsLayoutPoint(100, 5, QgsUnitTypes.LayoutMillimeters))

                        layout = manager.layoutByName(layoutName)
                        exporter = QgsLayoutExporter(layout)
                        outputImg = outputMAp.replace(".pdf",".png")
                        exporter.exportToImage(outputImg, QgsLayoutExporter.ImageExportSettings())
                        exporter.exportToPdf(outputMAp, QgsLayoutExporter.PdfExportSettings())

    #Maximum Temperature/////////////////////////////////////////////////////////////////////////////////////

            elif dropdown == "Maximum Temperature": 

                    for layer in QgsProject.instance().mapLayers().values():
                        layer_settings  = QgsPalLayerSettings()
                        text_format = QgsTextFormat()

                        text_format.setFont(QFont("Arial", 6))
                        text_format.setSize(6)

                        buffer_settings = QgsTextBufferSettings()
                        buffer_settings.setEnabled(True)
                        buffer_settings.setSize(0)
                        buffer_settings.setColor(QColor("black"))

                        text_format.setBuffer(buffer_settings)
                        layer_settings.setFormat(text_format)

                        layer_settings.isExpression = True
                        layer_settings.fieldName = "KGISDist_1 || '\n' || csv_file_maxTemp"
                        layer_settings.placement = 4
                        layer_settings.enabled = True

                        layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                        layer.setLabelsEnabled(True)
                        layer.setLabeling(layer_settings)
                        layer.triggerRepaint()

                    # Adding categories based on attribute table

                    target_field = 'csv_file_Deperture'
                    myRangeList = []

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())     
                    symbol.setColor(QColor("#A93226"))                              
                    myRange = QgsRendererRange(-20.0, -5.0, symbol, '(-5.0°C or less) - Markedly below normal')                   
                    myRangeList.append(myRange)                                     

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#E67E22"))
                    myRange = QgsRendererRange(-5.1, -3.1, symbol, '(-3.1°C to -5.0°C)- Appreciably below normal')
                    myRangeList.append(myRange)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#F1C40F"))
                    myRange = QgsRendererRange(-3.0, -1.6, symbol, '(-1.6°C to -3.0°C) - Below Normal')
                    myRangeList.append(myRange)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#27AE60"))
                    myRange = QgsRendererRange(-1.5, 1.5, symbol, '(-1.5°C to 1.5°C) - Normal')
                    myRangeList.append(myRange)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#87CEEB"))
                    myRange = QgsRendererRange(1.6, 3.0, symbol, '(1.6°C to 3.0°C) - Above Normal')
                    myRangeList.append(myRange)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#7F8C8D"))
                    myRange = QgsRendererRange(3.1, 5.0, symbol, '(3.1°C to 5.0°C) - Appreciably above normal')
                    myRangeList.append(myRange)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#1A5276"))
                    myRange = QgsRendererRange(5.1, 20.0, symbol, '(5.0°C or more) - Markedly above normal')
                    myRangeList.append(myRange)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#FFFFFF"))
                    myRange = QgsRendererRange(-999, -998, symbol, '(NA) - Data Not Reported')
                    myRangeList.append(myRange)

                    myRenderer = QgsGraduatedSymbolRenderer(target_field, myRangeList)  
                    myRenderer.setMode(QgsGraduatedSymbolRenderer.Custom)               

                    vlayer.setRenderer(myRenderer)                                  

                    #create project layout

                    layers = QgsProject.instance().mapLayersByName('Districts')
                    layer = layers[0]
                    project = QgsProject.instance()
                    manager = project.layoutManager()
                    layoutName = 'Layout1'
                    layouts_list = manager.printLayouts()

                    # remove any duplicate layouts
                    
                    for layout in layouts_list:
                        if layout.name() == layoutName:
                            manager.removeLayout(layout)
                    layout = QgsPrintLayout(project)
                    layout.initializeDefaults()
                    layout.setName(layoutName)
                    manager.addLayout(layout)

                    # create map item in the layout
                    
                    map = QgsLayoutItemMap(layout)
                    map.setRect(20, 20, 20, 20)

                    # set the map extent

                    ms = QgsMapSettings()
                    ms.setLayers([layer]) 
                    rect = QgsRectangle(ms.fullExtent())
                    rect.scale(1.70)
                    ms.setExtent(rect)
                    map.setExtent(rect)
                    #map.setBackgroundColor(QColor("#E8DAEF"))
                    layout.addLayoutItem(map)
                    map.attemptMove(QgsLayoutPoint(55, 20, QgsUnitTypes.LayoutMillimeters))
                    map.attemptResize(QgsLayoutSize(180, 180, QgsUnitTypes.LayoutMillimeters))

                    # create legend in the layout

                    legend = QgsLayoutItemLegend(layout)
                    legend.setTitle("Legend")
                    layerTree = QgsLayerTree()
                    layerTree.addLayer(layer)
                    legend.model().setRootGroup(layerTree)
                    layout.addLayoutItem(legend)
                    legend.attemptMove(QgsLayoutPoint(190, 50, QgsUnitTypes.LayoutMillimeters))
                    #legend.setBackgroundColor(QColor("#E8DAEF"))

                    # create logo in the layout
                   
                    logo = QgsLayoutItemPicture(layout)
                    logo.setPicturePath(inputLogo)
                    layout.addLayoutItem(logo)
                    logo.attemptResize(QgsLayoutSize(60,60,QgsUnitTypes.LayoutMillimeters))
                    logo.attemptMove(QgsLayoutPoint(15,5,QgsUnitTypes.LayoutMillimeters))

                    # create North Arrow in the layout

                    arrow = QgsLayoutItemPicture(layout)
                    path = QgsApplication.qgisSettingsDirPath()
                    path3 = os.path.join(path,"python/plugins/csv_to_map/arrows/","NorthArrow_11.svg")
                    arrow.setPicturePath(path3)
                    arrow.attemptResize(QgsLayoutSize(20,40,QgsUnitTypes.LayoutMillimeters))
                    arrow.attemptMove(QgsLayoutPoint(250,10,QgsUnitTypes.LayoutMillimeters))
                    layout.addLayoutItem(arrow)

                    # create title in the layout
            
                    title = QgsLayoutItemLabel(layout)
                    title.setText(inputHead + "Maximum Temperature recorded in Districts of Karnataka State valid from " +str((date.today() - timedelta(1)).strftime('%d.%m.%Y'))+" : 0830 IST to "+str(date.today().strftime('%d.%m.%Y')) +" : 0830 IST")
                    title.setFont(QFont('Arial', 14))
                    title.adjustSizeToText()
                    layout.addLayoutItem(title)
                    title.attemptResize(QgsLayoutSize(120,50,QgsUnitTypes.LayoutMillimeters))
                    title.attemptMove(QgsLayoutPoint(100, 5, QgsUnitTypes.LayoutMillimeters))

                    layout = manager.layoutByName(layoutName)
                    exporter = QgsLayoutExporter(layout)
                    outputImg = outputMAp.replace(".pdf",".png")
                    exporter.exportToImage(outputImg, QgsLayoutExporter.ImageExportSettings())
                    exporter.exportToPdf(outputMAp, QgsLayoutExporter.PdfExportSettings())
                
    #Minimum Temperature/////////////////////////////////////////////////////////////////////////////////////

            elif dropdown == "Minimum Temperature": 

                    #labelling the shapefile

                    for layer in QgsProject.instance().mapLayers().values():
                        layer_settings  = QgsPalLayerSettings()
                        text_format = QgsTextFormat()

                        text_format.setFont(QFont("Arial", 6))
                        text_format.setSize(6)

                        buffer_settings = QgsTextBufferSettings()
                        buffer_settings.setEnabled(True)
                        buffer_settings.setSize(0)
                        buffer_settings.setColor(QColor("black"))

                        text_format.setBuffer(buffer_settings)
                        layer_settings.setFormat(text_format)
                        layer_settings.isExpression = True
                        layer_settings.fieldName = "KGISDist_1 || '\n' || csv_file_minTemp"
                        layer_settings.placement = 4
                        layer_settings.enabled = True

                        layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                        layer.setLabelsEnabled(True)
                        layer.setLabeling(layer_settings)
                        layer.triggerRepaint()

                    # Adding categories based on attribute table

                    target_field = 'csv_file_Deperture'
                    myRangeList = []

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())     
                    symbol.setColor(QColor("#A93226"))                              
                    myRange = QgsRendererRange(-20.0, -5.0, symbol, '(-5.0°C or less) - Markedly below normal')                   
                    myRangeList.append(myRange)                                     

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#E67E22"))
                    myRange = QgsRendererRange(-5.1, -3.1, symbol, '(-3.1°C to -5.0°C)- Appreciably below normal')
                    myRangeList.append(myRange)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#F1C40F"))
                    myRange = QgsRendererRange(-3.0, -1.6, symbol, '(-1.6°C to -3.0°C) - Below Normal')
                    myRangeList.append(myRange)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#27AE60"))
                    myRange = QgsRendererRange(-1.5, 1.5, symbol, '(-1.5°C to 1.5°C) - Normal')
                    myRangeList.append(myRange)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#87CEEB"))
                    myRange = QgsRendererRange(1.6, 3.0, symbol, '(1.6°C to 3.0°C) - Above Normal')
                    myRangeList.append(myRange)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#7F8C8D"))
                    myRange = QgsRendererRange(3.1, 5.0, symbol, '(3.1°C to 5.0°C) - Appreciably above normal')
                    myRangeList.append(myRange)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#1A5276"))
                    myRange = QgsRendererRange(5.1, 20.0, symbol, '(5.0°C or more) - Markedly above normal')
                    myRangeList.append(myRange)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#FFFFFF"))
                    myRange = QgsRendererRange(-999, -998, symbol, '(NA) - Data Not Reported')
                    myRangeList.append(myRange)

                    myRenderer = QgsGraduatedSymbolRenderer(target_field, myRangeList)  
                    myRenderer.setMode(QgsGraduatedSymbolRenderer.Custom)               

                    vlayer.setRenderer(myRenderer)                                  

                    #create project layout

                    layers = QgsProject.instance().mapLayersByName('Districts')
                    layer = layers[0]
                    project = QgsProject.instance()
                    manager = project.layoutManager()
                    layoutName = 'Layout1'
                    layouts_list = manager.printLayouts()

                    # remove any duplicate layouts
                    
                    for layout in layouts_list:
                        if layout.name() == layoutName:
                            manager.removeLayout(layout)
                    layout = QgsPrintLayout(project)
                    layout.initializeDefaults()
                    layout.setName(layoutName)
                    manager.addLayout(layout)

                    # create map item in the layout
                    
                    map = QgsLayoutItemMap(layout)
                    map.setRect(20, 20, 20, 20)

                    # set the map extent

                    ms = QgsMapSettings()
                    ms.setLayers([layer]) 
                    rect = QgsRectangle(ms.fullExtent())
                    rect.scale(1.70)
                    ms.setExtent(rect)
                    map.setExtent(rect)
                    #map.setBackgroundColor(QColor("#E8DAEF"))
                    layout.addLayoutItem(map)
                    map.attemptMove(QgsLayoutPoint(55, 20, QgsUnitTypes.LayoutMillimeters))
                    map.attemptResize(QgsLayoutSize(180, 180, QgsUnitTypes.LayoutMillimeters))

                    # create legend in the layout

                    legend = QgsLayoutItemLegend(layout)
                    legend.setTitle("Legend")
                    layerTree = QgsLayerTree()
                    layerTree.addLayer(layer)
                    legend.model().setRootGroup(layerTree)
                    layout.addLayoutItem(legend)
                    legend.attemptMove(QgsLayoutPoint(190, 50, QgsUnitTypes.LayoutMillimeters))
                    #legend.setBackgroundColor(QColor("#E8DAEF"))

                    # create logo in the layout
                   
                    logo = QgsLayoutItemPicture(layout)
                    logo.setPicturePath(inputLogo)
                    layout.addLayoutItem(logo)
                    logo.attemptResize(QgsLayoutSize(60,60,QgsUnitTypes.LayoutMillimeters))
                    logo.attemptMove(QgsLayoutPoint(15,5,QgsUnitTypes.LayoutMillimeters))

                    # create North Arrow in the layout

                    arrow = QgsLayoutItemPicture(layout)
                    path = QgsApplication.qgisSettingsDirPath()
                    path3 = os.path.join(path,"python/plugins/csv_to_map/arrows/","NorthArrow_11.svg")
                    arrow.setPicturePath(path3)
                    arrow.attemptResize(QgsLayoutSize(20,40,QgsUnitTypes.LayoutMillimeters))
                    arrow.attemptMove(QgsLayoutPoint(250,10,QgsUnitTypes.LayoutMillimeters))
                    layout.addLayoutItem(arrow)

                    # create title in the layout

                    title = QgsLayoutItemLabel(layout)
                    title.setText(inputHead + "Minimum Temperature recorded in Districts of Karnataka State valid from " +str((date.today() - timedelta(1)).strftime('%d.%m.%Y'))+" : 0830 IST to "+str(date.today().strftime('%d.%m.%Y')) +" : 0830 IST")
                    title.setFont(QFont('Arial', 14))
                    title.adjustSizeToText()
                    layout.addLayoutItem(title)
                    title.attemptResize(QgsLayoutSize(120,50,QgsUnitTypes.LayoutMillimeters))
                    title.attemptMove(QgsLayoutPoint(100, 5, QgsUnitTypes.LayoutMillimeters))


                    layout = manager.layoutByName(layoutName)
                    exporter = QgsLayoutExporter(layout)
                    outputImg = outputMAp.replace(".pdf",".png")
                    exporter.exportToImage(outputImg, QgsLayoutExporter.ImageExportSettings())
                    exporter.exportToPdf(outputMAp, QgsLayoutExporter.PdfExportSettings())

    #Forecast Day 1/////////////////////////////////////////////////////////////////////////////////////

            elif dropdown == "Forecast Day 1": 

                    #labelling the shapefile

                    for layer in QgsProject.instance().mapLayers().values():
                        layer_settings  = QgsPalLayerSettings()
                        text_format = QgsTextFormat()

                        text_format.setFont(QFont("Arial", 7))
                        text_format.setSize(7)

                        buffer_settings = QgsTextBufferSettings()
                        buffer_settings.setEnabled(True)
                        buffer_settings.setSize(0)
                        buffer_settings.setColor(QColor("black"))

                        text_format.setBuffer(buffer_settings)
                        layer_settings.setFormat(text_format)

                        layer_settings.fieldName = "KGISDist_1"
                        layer_settings.placement = 4
                        layer_settings.enabled = True

                        layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                        layer.setLabelsEnabled(True)
                        layer.setLabeling(layer_settings)
                        layer.triggerRepaint()

                    # Adding categories based on attribute table

                    target_field = 'csv_file_fcst1'
                    myRangeList = []

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())     
                    symbol.setColor(QColor("#FFFFFF"))                              
                    myRange = QgsRendererCategory('DRY', symbol, 'DRY (0%)')                   
                    myRangeList.append(myRange)                                     

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#28B463"))
                    myRange = QgsRendererCategory('ISOL',symbol, 'Isolated (ISOL) (1% - 25%)')
                    myRangeList.append(myRange)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#196F3D"))
                    myRange = QgsRendererCategory('SCT',symbol, 'Scattered (SCT) (26% - 50%)')
                    myRangeList.append(myRange)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#ADD8E6"))
                    myRange = QgsRendererCategory('FWS',symbol, 'Fairly Widespread (FWS) (51% - 75%)')
                    myRangeList.append(myRange)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#21618C"))
                    myRange = QgsRendererCategory('WS', symbol, 'Widespread (WS) (76% - 100%)')
                    myRangeList.append(myRange)

                    myRenderer = QgsCategorizedSymbolRenderer(target_field, myRangeList)                
                    vlayer.setRenderer(myRenderer)                                  

                    #create project layout

                    layers = QgsProject.instance().mapLayersByName('Districts')
                    layer = layers[0]
                    project = QgsProject.instance()
                    manager = project.layoutManager()
                    layoutName = 'Layout1'
                    layouts_list = manager.printLayouts()

                    # remove any duplicate layouts
                    
                    for layout in layouts_list:
                        if layout.name() == layoutName:
                            manager.removeLayout(layout)
                    layout = QgsPrintLayout(project)
                    layout.initializeDefaults()
                    layout.setName(layoutName)
                    manager.addLayout(layout)

                    # create map item in the layout
                    
                    map = QgsLayoutItemMap(layout)
                    map.setRect(20, 20, 20, 20)

                    # set the map extent

                    ms = QgsMapSettings()
                    ms.setLayers([layer]) 
                    rect = QgsRectangle(ms.fullExtent())
                    rect.scale(1.70)
                    ms.setExtent(rect)
                    map.setExtent(rect)
                    #map.setBackgroundColor(QColor("#E8DAEF"))
                    layout.addLayoutItem(map)
                    map.attemptMove(QgsLayoutPoint(55, 20, QgsUnitTypes.LayoutMillimeters))
                    map.attemptResize(QgsLayoutSize(180, 180, QgsUnitTypes.LayoutMillimeters))

                    # create legend in the layout

                    legend = QgsLayoutItemLegend(layout)
                    legend.setTitle("Legend")
                    layerTree = QgsLayerTree()
                    layerTree.addLayer(layer)
                    legend.model().setRootGroup(layerTree)
                    layout.addLayoutItem(legend)
                    legend.attemptMove(QgsLayoutPoint(210, 70, QgsUnitTypes.LayoutMillimeters))
                    #legend.setBackgroundColor(QColor("#E8DAEF"))

                    # create logo in the layout
                   
                    logo = QgsLayoutItemPicture(layout)
                    logo.setPicturePath(inputLogo)
                    layout.addLayoutItem(logo)
                    logo.attemptResize(QgsLayoutSize(60,60,QgsUnitTypes.LayoutMillimeters))
                    logo.attemptMove(QgsLayoutPoint(25,5,QgsUnitTypes.LayoutMillimeters))

                    # create North Arrow in the layout

                    arrow = QgsLayoutItemPicture(layout)
                    path = QgsApplication.qgisSettingsDirPath()
                    path3 = os.path.join(path,"python/plugins/csv_to_map/arrows/","NorthArrow_11.svg")
                    arrow.setPicturePath(path3)
                    arrow.attemptResize(QgsLayoutSize(20,40,QgsUnitTypes.LayoutMillimeters))
                    arrow.attemptMove(QgsLayoutPoint(250,10,QgsUnitTypes.LayoutMillimeters))
                    layout.addLayoutItem(arrow)

                    # create title in the layout
            
                    title = QgsLayoutItemLabel(layout)
                    title.setText(inputHead + "Rainfall Forecast for the Districts of Karnataka State valid from " +str(date.today().strftime('%d.%m.%Y'))+" : 0830 IST to "+str((date.today()+ timedelta(1)).strftime('%d.%m.%Y')) +" : 0830 IST")
                    title.setFont(QFont('Arial', 14))
                    title.adjustSizeToText()
                    layout.addLayoutItem(title)
                    title.attemptResize(QgsLayoutSize(125,75,QgsUnitTypes.LayoutMillimeters))
                    title.attemptMove(QgsLayoutPoint(100, 5, QgsUnitTypes.LayoutMillimeters))

                    layout = manager.layoutByName(layoutName)
                    exporter = QgsLayoutExporter(layout)
                    outputImg = outputMAp.replace(".pdf",".png")
                    exporter.exportToImage(outputImg, QgsLayoutExporter.ImageExportSettings())
                    exporter.exportToPdf(outputMAp, QgsLayoutExporter.PdfExportSettings())

    #Forecast Day 2/////////////////////////////////////////////////////////////////////////////////////

            elif dropdown == "Forecast Day 2": 

                    #labelling the shapefile

                    for layer in QgsProject.instance().mapLayers().values():
                        layer_settings  = QgsPalLayerSettings()
                        text_format = QgsTextFormat()

                        text_format.setFont(QFont("Arial", 7))
                        text_format.setSize(7)

                        buffer_settings = QgsTextBufferSettings()
                        buffer_settings.setEnabled(True)
                        buffer_settings.setSize(0)
                        buffer_settings.setColor(QColor("black"))

                        text_format.setBuffer(buffer_settings)
                        layer_settings.setFormat(text_format)

                        layer_settings.fieldName = "KGISDist_1"
                        layer_settings.placement = 4
                        layer_settings.enabled = True

                        layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                        layer.setLabelsEnabled(True)
                        layer.setLabeling(layer_settings)
                        layer.triggerRepaint()

                    # Adding categories based on attribute table

                    target_field = 'csv_file_fcst2'
                    myRangeList = []

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())     
                    symbol.setColor(QColor("#FFFFFF"))                              
                    myRange = QgsRendererCategory('DRY', symbol, 'DRY (0%)')                   
                    myRangeList.append(myRange)                                     

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#28B463"))
                    myRange = QgsRendererCategory('ISOL',symbol, 'Isolated (ISOL) (1% - 25%)')
                    myRangeList.append(myRange)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#196F3D"))
                    myRange = QgsRendererCategory('SCT',symbol, 'Scattered (SCT) (26% - 50%)')
                    myRangeList.append(myRange)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#ADD8E6"))
                    myRange = QgsRendererCategory('FWS',symbol, 'Fairly Widespread (FWS) (51% - 75%)')
                    myRangeList.append(myRange)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#21618C"))
                    myRange = QgsRendererCategory('WS', symbol, 'Widespread (WS) (76% - 100%)')
                    myRangeList.append(myRange)

                    myRenderer = QgsCategorizedSymbolRenderer(target_field, myRangeList)                
                    vlayer.setRenderer(myRenderer)                                  

                    #create project layout

                    layers = QgsProject.instance().mapLayersByName('Districts')
                    layer = layers[0]
                    project = QgsProject.instance()
                    manager = project.layoutManager()
                    layoutName = 'Layout1'
                    layouts_list = manager.printLayouts()

                    # remove any duplicate layouts
                    
                    for layout in layouts_list:
                        if layout.name() == layoutName:
                            manager.removeLayout(layout)
                    layout = QgsPrintLayout(project)
                    layout.initializeDefaults()
                    layout.setName(layoutName)
                    manager.addLayout(layout)

                    # create map item in the layout
                    
                    map = QgsLayoutItemMap(layout)
                    map.setRect(20, 20, 20, 20)

                    # set the map extent

                    ms = QgsMapSettings()
                    ms.setLayers([layer]) 
                    rect = QgsRectangle(ms.fullExtent())
                    rect.scale(1.70)
                    ms.setExtent(rect)
                    map.setExtent(rect)
                    #map.setBackgroundColor(QColor("#E8DAEF"))
                    layout.addLayoutItem(map)
                    map.attemptMove(QgsLayoutPoint(55, 20, QgsUnitTypes.LayoutMillimeters))
                    map.attemptResize(QgsLayoutSize(180, 180, QgsUnitTypes.LayoutMillimeters))

                    # create legend in the layout

                    legend = QgsLayoutItemLegend(layout)
                    legend.setTitle("Legend")
                    layerTree = QgsLayerTree()
                    layerTree.addLayer(layer)
                    legend.model().setRootGroup(layerTree)
                    layout.addLayoutItem(legend)
                    legend.attemptMove(QgsLayoutPoint(210, 70, QgsUnitTypes.LayoutMillimeters))
                    #legend.setBackgroundColor(QColor("#E8DAEF"))

                    # create logo in the layout
                   
                    logo = QgsLayoutItemPicture(layout)
                    logo.setPicturePath(inputLogo)
                    layout.addLayoutItem(logo)
                    logo.attemptResize(QgsLayoutSize(60,60,QgsUnitTypes.LayoutMillimeters))
                    logo.attemptMove(QgsLayoutPoint(25,5,QgsUnitTypes.LayoutMillimeters))

                    # create North Arrow in the layout

                    arrow = QgsLayoutItemPicture(layout)
                    path = QgsApplication.qgisSettingsDirPath()
                    path3 = os.path.join(path,"python/plugins/csv_to_map/arrows/","NorthArrow_11.svg")
                    arrow.setPicturePath(path3)
                    arrow.attemptResize(QgsLayoutSize(20,40,QgsUnitTypes.LayoutMillimeters))
                    arrow.attemptMove(QgsLayoutPoint(250,10,QgsUnitTypes.LayoutMillimeters))
                    layout.addLayoutItem(arrow)

                    # create title in the layout
            
                    title = QgsLayoutItemLabel(layout)
                    title.setText(inputHead + "Rainfall Forecast for the Districts of Karnataka State valid from " +str((date.today()+ timedelta(1)).strftime('%d.%m.%Y'))+" : 0830 IST to "+str((date.today()+ timedelta(2)).strftime('%d.%m.%Y')) +" : 0830 IST")
                    title.setFont(QFont('Arial', 14))
                    title.adjustSizeToText()
                    layout.addLayoutItem(title)
                    title.attemptResize(QgsLayoutSize(125,75,QgsUnitTypes.LayoutMillimeters))
                    title.attemptMove(QgsLayoutPoint(100, 5, QgsUnitTypes.LayoutMillimeters))

                    layout = manager.layoutByName(layoutName)
                    exporter = QgsLayoutExporter(layout)
                    outputImg = outputMAp.replace(".pdf",".png")
                    exporter.exportToImage(outputImg, QgsLayoutExporter.ImageExportSettings())
                    exporter.exportToPdf(outputMAp, QgsLayoutExporter.PdfExportSettings())

    #Forecast Day 3/////////////////////////////////////////////////////////////////////////////////////

            elif dropdown == "Forecast Day 3": 

                    #labelling the shapefile

                    for layer in QgsProject.instance().mapLayers().values():
                        layer_settings  = QgsPalLayerSettings()
                        text_format = QgsTextFormat()

                        text_format.setFont(QFont("Arial", 7))
                        text_format.setSize(7)

                        buffer_settings = QgsTextBufferSettings()
                        buffer_settings.setEnabled(True)
                        buffer_settings.setSize(0)
                        buffer_settings.setColor(QColor("black"))

                        text_format.setBuffer(buffer_settings)
                        layer_settings.setFormat(text_format)

                        layer_settings.fieldName = "KGISDist_1"
                        layer_settings.placement = 4
                        layer_settings.enabled = True

                        layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                        layer.setLabelsEnabled(True)
                        layer.setLabeling(layer_settings)
                        layer.triggerRepaint()

                    # Adding categories based on attribute table

                    target_field = 'csv_file_fcst3'
                    myRangeList = []

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())     
                    symbol.setColor(QColor("#FFFFFF"))                              
                    myRange = QgsRendererCategory('DRY', symbol, 'DRY (0%)')                   
                    myRangeList.append(myRange)                                     

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#28B463"))
                    myRange = QgsRendererCategory('ISOL',symbol, 'Isolated (ISOL) (1% - 25%)')
                    myRangeList.append(myRange)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#196F3D"))
                    myRange = QgsRendererCategory('SCT',symbol, 'Scattered (SCT) (26% - 50%)')
                    myRangeList.append(myRange)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#ADD8E6"))
                    myRange = QgsRendererCategory('FWS',symbol, 'Fairly Widespread (FWS) (51% - 75%)')
                    myRangeList.append(myRange)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#21618C"))
                    myRange = QgsRendererCategory('WS', symbol, 'Widespread (WS) (76% - 100%)')
                    myRangeList.append(myRange)

                    myRenderer = QgsCategorizedSymbolRenderer(target_field, myRangeList)                
                    vlayer.setRenderer(myRenderer)                                  

                    #create project layout

                    layers = QgsProject.instance().mapLayersByName('Districts')
                    layer = layers[0]
                    project = QgsProject.instance()
                    manager = project.layoutManager()
                    layoutName = 'Layout1'
                    layouts_list = manager.printLayouts()

                    # remove any duplicate layouts
                    
                    for layout in layouts_list:
                        if layout.name() == layoutName:
                            manager.removeLayout(layout)
                    layout = QgsPrintLayout(project)
                    layout.initializeDefaults()
                    layout.setName(layoutName)
                    manager.addLayout(layout)

                    # create map item in the layout
                    
                    map = QgsLayoutItemMap(layout)
                    map.setRect(20, 20, 20, 20)

                    # set the map extent

                    ms = QgsMapSettings()
                    ms.setLayers([layer]) 
                    rect = QgsRectangle(ms.fullExtent())
                    rect.scale(1.70)
                    ms.setExtent(rect)
                    map.setExtent(rect)
                    #map.setBackgroundColor(QColor("#FDFEFE "))
                    layout.addLayoutItem(map)
                    map.attemptMove(QgsLayoutPoint(55, 20, QgsUnitTypes.LayoutMillimeters))
                    map.attemptResize(QgsLayoutSize(180, 180, QgsUnitTypes.LayoutMillimeters))

                    # create legend in the layout

                    legend = QgsLayoutItemLegend(layout)
                    legend.setTitle("Legend")
                    layerTree = QgsLayerTree()
                    layerTree.addLayer(layer)
                    legend.model().setRootGroup(layerTree)
                    layout.addLayoutItem(legend)
                    legend.attemptMove(QgsLayoutPoint(210, 70, QgsUnitTypes.LayoutMillimeters))
                    #legend.setBackgroundColor(QColor("#E8DAEF"))

                    # create logo in the layout
                   
                    logo = QgsLayoutItemPicture(layout)
                    logo.setPicturePath(inputLogo)
                    layout.addLayoutItem(logo)
                    logo.attemptResize(QgsLayoutSize(60,60,QgsUnitTypes.LayoutMillimeters))
                    logo.attemptMove(QgsLayoutPoint(25,5,QgsUnitTypes.LayoutMillimeters))

                    # create North Arrow in the layout

                    arrow = QgsLayoutItemPicture(layout)
                    path = QgsApplication.qgisSettingsDirPath()
                    path3 = os.path.join(path,"python/plugins/csv_to_map/arrows/","NorthArrow_11.svg")
                    arrow.setPicturePath(path3)
                    arrow.attemptResize(QgsLayoutSize(20,40,QgsUnitTypes.LayoutMillimeters))
                    arrow.attemptMove(QgsLayoutPoint(250,10,QgsUnitTypes.LayoutMillimeters))
                    layout.addLayoutItem(arrow)

                    # create title in the layout
            
                    title = QgsLayoutItemLabel(layout)
                    title.setText(inputHead + "Rainfall Forecast for the Districts of Karnataka State valid from " +str((date.today()+ timedelta(2)).strftime('%d.%m.%Y'))+" : 0830 IST to "+str((date.today()+ timedelta(3)).strftime('%d.%m.%Y')) +" : 0830 IST")
                    title.setFont(QFont('Arial', 14))
                    title.adjustSizeToText()
                    layout.addLayoutItem(title)
                    title.attemptResize(QgsLayoutSize(125,75,QgsUnitTypes.LayoutMillimeters))
                    title.attemptMove(QgsLayoutPoint(100, 5, QgsUnitTypes.LayoutMillimeters))

                    layout = manager.layoutByName(layoutName)
                    exporter = QgsLayoutExporter(layout)
                    outputImg = outputMAp.replace(".pdf",".png")
                    exporter.exportToImage(outputImg, QgsLayoutExporter.ImageExportSettings())
                    exporter.exportToPdf(outputMAp, QgsLayoutExporter.PdfExportSettings())


    #Forecast Day 4/////////////////////////////////////////////////////////////////////////////////////

            elif dropdown == "Forecast Day 4": 

                    #labelling the shapefile

                    for layer in QgsProject.instance().mapLayers().values():
                        layer_settings  = QgsPalLayerSettings()
                        text_format = QgsTextFormat()

                        text_format.setFont(QFont("Arial", 10))
                        text_format.setSize(10)

                        buffer_settings = QgsTextBufferSettings()
                        buffer_settings.setEnabled(True)
                        buffer_settings.setSize(0)
                        buffer_settings.setColor(QColor("black"))

                        text_format.setBuffer(buffer_settings)
                        layer_settings.setFormat(text_format)

                        layer_settings.isExpression = True
                        layer_settings.fieldName = "KGISDist_1"
                        layer_settings.placement = 4
                        layer_settings.enabled = True

                        layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                        layer.setLabelsEnabled(True)
                        layer.setLabeling(layer_settings)
                        layer.triggerRepaint()

                    # Adding categories based on attribute table

                    target_field = 'csv_file_fcst4'
                    myRangeList = []

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())     
                    symbol.setColor(QColor("#FFFFFF"))                              
                    myRange = QgsRendererCategory('DRY', symbol, 'DRY (0%)')                   
                    myRangeList.append(myRange)                                     

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#28B463"))
                    myRange = QgsRendererCategory('ISOL',symbol, 'Isolated (ISOL) (1% - 25%)')
                    myRangeList.append(myRange)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#196F3D"))
                    myRange = QgsRendererCategory('SCT',symbol, 'Scattered (SCT) (26% - 50%)')
                    myRangeList.append(myRange)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#ADD8E6"))
                    myRange = QgsRendererCategory('FWS',symbol, 'Fairly Widespread (FWS) (51% - 75%)')
                    myRangeList.append(myRange)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#21618C"))
                    myRange = QgsRendererCategory('WS', symbol, 'Widespread (WS) (76% - 100%)')
                    myRangeList.append(myRange)

                    myRenderer = QgsCategorizedSymbolRenderer(target_field, myRangeList)                
                    vlayer.setRenderer(myRenderer)                                  

                    #create project layout

                    layers = QgsProject.instance().mapLayersByName('Districts')
                    layer = layers[0]
                    project = QgsProject.instance()
                    manager = project.layoutManager()
                    layoutName = 'Layout1'
                    layouts_list = manager.printLayouts()

                    # remove any duplicate layouts
                    
                    for layout in layouts_list:
                        if layout.name() == layoutName:
                            manager.removeLayout(layout)
                    layout = QgsPrintLayout(project)
                    layout.initializeDefaults()
                    layout.setName(layoutName)
                    manager.addLayout(layout)

                    # create map item in the layout
                    
                    map = QgsLayoutItemMap(layout)
                    map.setRect(20, 20, 20, 20)

                    # set the map extent

                    ms = QgsMapSettings()
                    ms.setLayers([layer]) 
                    rect = QgsRectangle(ms.fullExtent())
                    rect.scale(1.70)
                    ms.setExtent(rect)
                    map.setExtent(rect)
                    map.setBackgroundColor(QColor(255, 255, 255, 0))
                    layout.addLayoutItem(map)
                    map.attemptMove(QgsLayoutPoint(55, 20, QgsUnitTypes.LayoutMillimeters))
                    map.attemptResize(QgsLayoutSize(180, 180, QgsUnitTypes.LayoutMillimeters))

                    # create legend in the layout

                    legend = QgsLayoutItemLegend(layout)
                    legend.setTitle("Legend")
                    layerTree = QgsLayerTree()
                    layerTree.addLayer(layer)
                    legend.model().setRootGroup(layerTree)
                    layout.addLayoutItem(legend)
                    legend.attemptMove(QgsLayoutPoint(210, 70, QgsUnitTypes.LayoutMillimeters))

                    # create logo in the layout
                   
                    logo = QgsLayoutItemPicture(layout)
                    logo.setPicturePath(inputLogo)
                    layout.addLayoutItem(logo)
                    logo.attemptResize(QgsLayoutSize(60,60,QgsUnitTypes.LayoutMillimeters))
                    logo.attemptMove(QgsLayoutPoint(25,5,QgsUnitTypes.LayoutMillimeters))

                    # create North Arrow in the layout

                    arrow = QgsLayoutItemPicture(layout)
                    path = QgsApplication.qgisSettingsDirPath()
                    path3 = os.path.join(path,"python/plugins/csv_to_map/arrows/","NorthArrow_11.svg")
                    arrow.setPicturePath(path3)
                    arrow.attemptResize(QgsLayoutSize(20,40,QgsUnitTypes.LayoutMillimeters))
                    arrow.attemptMove(QgsLayoutPoint(250,10,QgsUnitTypes.LayoutMillimeters))
                    layout.addLayoutItem(arrow)

                    # create title in the layout
            
                    title = QgsLayoutItemLabel(layout)
                    title.setText(inputHead + "Rainfall Forecast for the Districts of Karnataka State valid from " +str((date.today()+ timedelta(3)).strftime('%d.%m.%Y'))+" : 0830 IST to "+str((date.today()+ timedelta(4)).strftime('%d.%m.%Y')) +" : 0830 IST")
                    title.setFont(QFont('Arial', 14))
                    title.adjustSizeToText()
                    layout.addLayoutItem(title)
                    title.attemptResize(QgsLayoutSize(125,75,QgsUnitTypes.LayoutMillimeters))
                    title.attemptMove(QgsLayoutPoint(100, 5, QgsUnitTypes.LayoutMillimeters))

                    layout = manager.layoutByName(layoutName)
                    exporter = QgsLayoutExporter(layout)
                    outputImg = outputMAp.replace(".pdf",".png")
                    exporter.exportToImage(outputImg, QgsLayoutExporter.ImageExportSettings())
                    exporter.exportToPdf(outputMAp, QgsLayoutExporter.PdfExportSettings())


    #Forecast Day 5/////////////////////////////////////////////////////////////////////////////////////

            elif dropdown == "Forecast Day 5": 

                    #labelling the shapefile

                    for layer in QgsProject.instance().mapLayers().values():
                        layer_settings  = QgsPalLayerSettings()
                        text_format = QgsTextFormat()

                        text_format.setFont(QFont("Arial", 10))
                        text_format.setSize(10)

                        buffer_settings = QgsTextBufferSettings()
                        buffer_settings.setEnabled(True)
                        buffer_settings.setSize(0)
                        buffer_settings.setColor(QColor("black"))

                        text_format.setBuffer(buffer_settings)
                        layer_settings.setFormat(text_format)

                        layer_settings.isExpression = True
                        layer_settings.fieldName = "KGISDist_1"
                        layer_settings.placement = 4
                        layer_settings.enabled = True

                        layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                        layer.setLabelsEnabled(True)
                        layer.setLabeling(layer_settings)
                        layer.triggerRepaint()

                    # Adding categories based on attribute table

                    target_field = 'csv_file_fcst5'
                    myRangeList = []

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())     
                    symbol.setColor(QColor("#FFFFFF"))                              
                    myRange = QgsRendererCategory('DRY', symbol, 'DRY (0%)')                   
                    myRangeList.append(myRange)                                     

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#28B463"))
                    myRange = QgsRendererCategory('ISOL',symbol, 'Isolated (ISOL) (1% - 25%)')
                    myRangeList.append(myRange)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#196F3D"))
                    myRange = QgsRendererCategory('SCT',symbol, 'Scattered (SCT) (26% - 50%)')
                    myRangeList.append(myRange)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#ADD8E6"))
                    myRange = QgsRendererCategory('FWS',symbol, 'Fairly Widespread (FWS) (51% - 75%)')
                    myRangeList.append(myRange)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#21618C"))
                    myRange = QgsRendererCategory('WS', symbol, 'Widespread (WS) (76% - 100%)')
                    myRangeList.append(myRange)

                    myRenderer = QgsCategorizedSymbolRenderer(target_field, myRangeList)                
                    vlayer.setRenderer(myRenderer)                                  

                    #create project layout

                    layers = QgsProject.instance().mapLayersByName('Districts')
                    layer = layers[0]
                    project = QgsProject.instance()
                    manager = project.layoutManager()
                    layoutName = 'Layout1'
                    layouts_list = manager.printLayouts()

                    # remove any duplicate layouts
                    
                    for layout in layouts_list:
                        if layout.name() == layoutName:
                            manager.removeLayout(layout)
                    layout = QgsPrintLayout(project)
                    layout.initializeDefaults()
                    layout.setName(layoutName)
                    manager.addLayout(layout)

                    # create map item in the layout
                    
                    map = QgsLayoutItemMap(layout)
                    map.setRect(20, 20, 20, 20)

                    # set the map extent

                    ms = QgsMapSettings()
                    ms.setLayers([layer]) 
                    rect = QgsRectangle(ms.fullExtent())
                    rect.scale(1.70)
                    ms.setExtent(rect)
                    map.setExtent(rect)
                    map.setBackgroundColor(QColor(255, 255, 255, 0))
                    layout.addLayoutItem(map)
                    map.attemptMove(QgsLayoutPoint(55, 20, QgsUnitTypes.LayoutMillimeters))
                    map.attemptResize(QgsLayoutSize(180, 180, QgsUnitTypes.LayoutMillimeters))

                    # create legend in the layout

                    legend = QgsLayoutItemLegend(layout)
                    legend.setTitle("Legend")
                    layerTree = QgsLayerTree()
                    layerTree.addLayer(layer)
                    legend.model().setRootGroup(layerTree)
                    layout.addLayoutItem(legend)
                    legend.attemptMove(QgsLayoutPoint(210, 70, QgsUnitTypes.LayoutMillimeters))

                    # create logo in the layout
                   
                    logo = QgsLayoutItemPicture(layout)
                    logo.setPicturePath(inputLogo)
                    layout.addLayoutItem(logo)
                    logo.attemptResize(QgsLayoutSize(60,60,QgsUnitTypes.LayoutMillimeters))
                    logo.attemptMove(QgsLayoutPoint(25,5,QgsUnitTypes.LayoutMillimeters))

                    # create North Arrow in the layout

                    arrow = QgsLayoutItemPicture(layout)
                    path = QgsApplication.qgisSettingsDirPath()
                    path3 = os.path.join(path,"python/plugins/csv_to_map/arrows/","NorthArrow_11.svg")
                    arrow.setPicturePath(path3)
                    arrow.attemptResize(QgsLayoutSize(20,40,QgsUnitTypes.LayoutMillimeters))
                    arrow.attemptMove(QgsLayoutPoint(250,10,QgsUnitTypes.LayoutMillimeters))
                    layout.addLayoutItem(arrow)

                    # create title in the layout
            
                    title = QgsLayoutItemLabel(layout)
                    title.setText(inputHead + "Rainfall Forecast for the Districts of Karnataka State valid from " +str((date.today()+ timedelta(4)).strftime('%d.%m.%Y'))+" : 0830 IST to "+str((date.today()+ timedelta(5)).strftime('%d.%m.%Y')) +" : 0830 IST")
                    title.setFont(QFont('Arial', 14))
                    title.adjustSizeToText()
                    layout.addLayoutItem(title)
                    title.attemptResize(QgsLayoutSize(125,75,QgsUnitTypes.LayoutMillimeters))
                    title.attemptMove(QgsLayoutPoint(100, 5, QgsUnitTypes.LayoutMillimeters))

                    layout = manager.layoutByName(layoutName)
                    exporter = QgsLayoutExporter(layout)
                    outputImg = outputMAp.replace(".pdf",".png")
                    exporter.exportToImage(outputImg, QgsLayoutExporter.ImageExportSettings())
                    exporter.exportToPdf(outputMAp, QgsLayoutExporter.PdfExportSettings())

    #Warning Day 1/////////////////////////////////////////////////////////////////////////////////////

            elif dropdown == "Warning Day 1": 

                    #labelling the shapefile

                    uri1 = "file:///" + inputCsv + "?encoding=%s&delimiter=%s&xField=%s&yField=%s&crs=%s" % ("UTF-8",",", "long", "lat","epsg:4326")
                    wrng = QgsVectorLayer(uri1, "Warnings", "delimitedtext")
                    QgsProject.instance().addMapLayer(wrng)
                    path = QgsApplication.qgisSettingsDirPath()
                    path2 = os.path.join(path,"python/plugins/csv_to_map/Warning_Symbols/","ws1.qml")
                    wrng.loadNamedStyle(path2)
                    wrng.triggerRepaint()

                    for layer in QgsProject.instance().mapLayers().values():
                        layer_settings  = QgsPalLayerSettings()
                        text_format = QgsTextFormat()

                        text_format.setFont(QFont("Arial", 6))
                        text_format.setSize(6)

                        buffer_settings = QgsTextBufferSettings()
                        buffer_settings.setEnabled(True)
                        buffer_settings.setSize(0)
                        buffer_settings.setColor(QColor("black"))

                        text_format.setBuffer(buffer_settings)
                        layer_settings.setFormat(text_format)

                        layer_settings.isExpression = True
                        layer_settings.fieldName = "KGISDist_1"
                        layer_settings.placement = 4
                        layer_settings.enabled = True

                        layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                        layer.setLabelsEnabled(True)
                        layer.setLabeling(layer_settings)
                        layer.triggerRepaint()

                    # Adding categories based on attribute table

                    target_field1 = 'csv_file_wrng 1'
                    myRangeList1= []

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#A93226"))
                    myRange1 = QgsRendererCategory('RED',symbol, 'WARNING (TAKE ACTION)')
                    myRangeList1.append(myRange1)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#E67E22"))
                    myRange1 = QgsRendererCategory('ORANGE',symbol, 'ALERT (BE PREPARED)')
                    myRangeList1.append(myRange1)
                    
                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#F1C40F"))
                    myRange1 = QgsRendererCategory('YELLOW',symbol, 'WATCH (BE UPDATED)')
                    myRangeList1.append(myRange1)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())     
                    symbol.setColor(QColor("#1E8449"))                        
                    myRange1 = QgsRendererCategory('GREEN', symbol, 'NO WARNING (NO ACTION)')                   
                    myRangeList1.append(myRange1)    

                    myRenderer1 = QgsCategorizedSymbolRenderer(target_field1, myRangeList1)                
                    vlayer.setRenderer(myRenderer1)

                    #create project layout

                    layers = QgsProject.instance().mapLayersByName('Districts')     
                    layer = layers[0]
                    project = QgsProject.instance()
                    manager = project.layoutManager()
                    layoutName = 'Layout1'
                    layouts_list = manager.printLayouts()

                    # remove any duplicate layouts
                    
                    for layout in layouts_list:
                        if layout.name() == layoutName:
                            manager.removeLayout(layout)
                    layout = QgsPrintLayout(project)
                    layout.initializeDefaults()
                    layout.setName(layoutName)
                    manager.addLayout(layout)

                    # create map item in the layout
                    
                    map = QgsLayoutItemMap(layout)
                    map.setRect(20, 20, 20, 20)

                    # set the map extent
                    ms = QgsMapSettings()
                    ms.setLayers([layer])
                    rect = QgsRectangle(72.892,11.169,80.180,18.457)
                    rect.scale(1.0)
                    ms.setExtent(rect)
                    map.setExtent(rect)
                    map.setBackgroundColor(QColor(255, 255, 255, 0))
                    layout.addLayoutItem(map)
                    map.attemptMove(QgsLayoutPoint(35,35, QgsUnitTypes.LayoutMillimeters))
                    map.attemptResize(QgsLayoutSize(180, 180, QgsUnitTypes.LayoutMillimeters))

                    # create legend in the layout

                    legend = QgsLayoutItemLegend(layout)
                    legend.setTitle("Level of Warnings")
                    layerTree = QgsLayerTree()
                    layerTree.addLayer(layer)
                    legend.model().setRootGroup(layerTree)
                    layout.addLayoutItem(legend)
                    legend.attemptMove(QgsLayoutPoint(200, 135, QgsUnitTypes.LayoutMillimeters))

                    legend2 = QgsLayoutItemLegend(layout)
                    legend2.setTitle("Legend")
                    layerTree2 = QgsLayerTree()
                    layerTree2.addLayer(wrng)
                    legend2.model().setRootGroup(layerTree2)
                    layout.addLayoutItem(legend2)
                    legend2.attemptMove(QgsLayoutPoint(200, 30, QgsUnitTypes.LayoutMillimeters))

                    # create logo in the layout
                   
                    logo = QgsLayoutItemPicture(layout)
                    logo.setPicturePath(inputLogo)
                    layout.addLayoutItem(logo)
                    logo.attemptResize(QgsLayoutSize(60,60,QgsUnitTypes.LayoutMillimeters))
                    logo.attemptMove(QgsLayoutPoint(15,5,QgsUnitTypes.LayoutMillimeters))

                    # create North Arrow in the layout

                    arrow = QgsLayoutItemPicture(layout)
                    path3 = os.path.join(path,"python/plugins/csv_to_map/arrows/","NorthArrow_11.svg")
                    arrow.setPicturePath(path3)
                    arrow.attemptResize(QgsLayoutSize(20,40,QgsUnitTypes.LayoutMillimeters))
                    arrow.attemptMove(QgsLayoutPoint(250,10,QgsUnitTypes.LayoutMillimeters))
                    layout.addLayoutItem(arrow)

                    # create title in the layout
            
                    title = QgsLayoutItemLabel(layout)
                    title.setText(inputHead + "Weather Warning for the District of Karnataka Valid from " +str(date.today().strftime('%d.%m.%Y'))+" : 0830 IST to "+str((date.today()+ timedelta(1)).strftime('%d.%m.%Y')) +" : 0830 IST")
                    title.setFont(QFont('Arial', 14))
                    title.adjustSizeToText()
                    layout.addLayoutItem(title)
                    title.attemptResize(QgsLayoutSize(120,50,QgsUnitTypes.LayoutMillimeters))
                    title.attemptMove(QgsLayoutPoint(100, 5, QgsUnitTypes.LayoutMillimeters))

                    layout = manager.layoutByName(layoutName)
                    exporter = QgsLayoutExporter(layout)
                    outputImg = outputMAp.replace(".pdf",".png")
                    exporter.exportToImage(outputImg, QgsLayoutExporter.ImageExportSettings())
                    exporter.exportToPdf(outputMAp, QgsLayoutExporter.PdfExportSettings())

    #Warning Day 2/////////////////////////////////////////////////////////////////////////////////////

            elif dropdown == "Warning Day 2": 

                    #labelling the shapefile

                    uri1 = "file:///" + inputCsv + "?encoding=%s&delimiter=%s&xField=%s&yField=%s&crs=%s" % ("UTF-8",",", "long", "lat","epsg:4326")
                    wrng = QgsVectorLayer(uri1, "Warnings", "delimitedtext")
                    QgsProject.instance().addMapLayer(wrng)
                    path = QgsApplication.qgisSettingsDirPath()
                    path2 = os.path.join(path,"python/plugins/csv_to_map/Warning_Symbols/","ws2.qml")
                    wrng.loadNamedStyle(path2)
                    wrng.triggerRepaint()

                    for layer in QgsProject.instance().mapLayers().values():
                        layer_settings  = QgsPalLayerSettings()
                        text_format = QgsTextFormat()

                        text_format.setFont(QFont("Arial", 6))
                        text_format.setSize(6)

                        buffer_settings = QgsTextBufferSettings()
                        buffer_settings.setEnabled(True)
                        buffer_settings.setSize(0)
                        buffer_settings.setColor(QColor("black"))

                        text_format.setBuffer(buffer_settings)
                        layer_settings.setFormat(text_format)

                        layer_settings.isExpression = True
                        layer_settings.fieldName = "KGISDist_1"
                        layer_settings.placement = 4
                        layer_settings.enabled = True

                        layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                        layer.setLabelsEnabled(True)
                        layer.setLabeling(layer_settings)
                        layer.triggerRepaint()

                    # Adding categories based on attribute table

                    target_field1 = 'csv_file_wrng2'
                    myRangeList1= []

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#A93226"))
                    myRange1 = QgsRendererCategory('RED',symbol, 'WARNING (TAKE ACTION)')
                    myRangeList1.append(myRange1)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#E67E22"))
                    myRange1 = QgsRendererCategory('ORANGE',symbol, 'ALERT (BE PREPARED)')
                    myRangeList1.append(myRange1)
                    
                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#F1C40F"))
                    myRange1 = QgsRendererCategory('YELLOW',symbol, 'WATCH (BE UPDATED)')
                    myRangeList1.append(myRange1)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())     
                    symbol.setColor(QColor("#1E8449"))                        
                    myRange1 = QgsRendererCategory('GREEN', symbol, 'NO WARNING (NO ACTION)')                   
                    myRangeList1.append(myRange1) 

                    myRenderer1 = QgsCategorizedSymbolRenderer(target_field1, myRangeList1)                
                    vlayer.setRenderer(myRenderer1)

                    #create project layout

                    layers = QgsProject.instance().mapLayersByName('Districts')     
                    layer = layers[0]
                    project = QgsProject.instance()
                    manager = project.layoutManager()
                    layoutName = 'Layout1'
                    layouts_list = manager.printLayouts()

                    # remove any duplicate layouts
                    
                    for layout in layouts_list:
                        if layout.name() == layoutName:
                            manager.removeLayout(layout)
                    layout = QgsPrintLayout(project)
                    layout.initializeDefaults()
                    layout.setName(layoutName)
                    manager.addLayout(layout)

                    # create map item in the layout
                    
                    map = QgsLayoutItemMap(layout)
                    map.setRect(20, 20, 20, 20)

                    # set the map extent
                    ms = QgsMapSettings()
                    ms.setLayers([layer])
                    rect = QgsRectangle(72.892,11.169,80.180,18.457)
                    rect.scale(1.0)
                    ms.setExtent(rect)
                    map.setExtent(rect)
                    map.setBackgroundColor(QColor(255, 255, 255, 0))
                    layout.addLayoutItem(map)
                    map.attemptMove(QgsLayoutPoint(35,35, QgsUnitTypes.LayoutMillimeters))
                    map.attemptResize(QgsLayoutSize(180, 180, QgsUnitTypes.LayoutMillimeters))

                    # create legend in the layout

                    legend = QgsLayoutItemLegend(layout)
                    legend.setTitle("Level of Warnings")
                    layerTree = QgsLayerTree()
                    layerTree.addLayer(layer)
                    legend.model().setRootGroup(layerTree)
                    layout.addLayoutItem(legend)
                    legend.attemptMove(QgsLayoutPoint(200, 135, QgsUnitTypes.LayoutMillimeters))

                    legend2 = QgsLayoutItemLegend(layout)
                    legend2.setTitle("Legend")
                    layerTree2 = QgsLayerTree()
                    layerTree2.addLayer(wrng)
                    legend2.model().setRootGroup(layerTree2)
                    layout.addLayoutItem(legend2)
                    legend2.attemptMove(QgsLayoutPoint(200, 30, QgsUnitTypes.LayoutMillimeters))

                    # create logo in the layout
                   
                    logo = QgsLayoutItemPicture(layout)
                    logo.setPicturePath(inputLogo)
                    layout.addLayoutItem(logo)
                    logo.attemptResize(QgsLayoutSize(60,60,QgsUnitTypes.LayoutMillimeters))
                    logo.attemptMove(QgsLayoutPoint(15,5,QgsUnitTypes.LayoutMillimeters))

                    # create North Arrow in the layout

                    arrow = QgsLayoutItemPicture(layout)
                    path3 = os.path.join(path,"python/plugins/csv_to_map/arrows/","NorthArrow_11.svg")
                    arrow.setPicturePath(path3)
                    arrow.attemptResize(QgsLayoutSize(20,40,QgsUnitTypes.LayoutMillimeters))
                    arrow.attemptMove(QgsLayoutPoint(250,10,QgsUnitTypes.LayoutMillimeters))
                    layout.addLayoutItem(arrow)

                    # create title in the layout
            
                    title = QgsLayoutItemLabel(layout)
                    title.setText(inputHead + "Weather Warning for the District of Karnataka Valid from " +str((date.today()+ timedelta(1)).strftime('%d.%m.%Y'))+" : 0830 IST to "+str((date.today()+ timedelta(2)).strftime('%d.%m.%Y')) +" : 0830 IST")
                    title.setFont(QFont('Arial', 14))
                    title.adjustSizeToText()
                    layout.addLayoutItem(title)
                    title.attemptResize(QgsLayoutSize(120,50,QgsUnitTypes.LayoutMillimeters))
                    title.attemptMove(QgsLayoutPoint(100, 5, QgsUnitTypes.LayoutMillimeters))

                    layout = manager.layoutByName(layoutName)
                    exporter = QgsLayoutExporter(layout)
                    outputImg = outputMAp.replace(".pdf",".png")
                    exporter.exportToImage(outputImg, QgsLayoutExporter.ImageExportSettings())
                    exporter.exportToPdf(outputMAp, QgsLayoutExporter.PdfExportSettings())

    #Warning Day 3/////////////////////////////////////////////////////////////////////////////////////

            elif dropdown == "Warning Day 3": 

                    #labelling the shapefile

                    uri1 = "file:///" + inputCsv + "?encoding=%s&delimiter=%s&xField=%s&yField=%s&crs=%s" % ("UTF-8",",", "long", "lat","epsg:4326")
                    wrng = QgsVectorLayer(uri1, "Warnings", "delimitedtext")
                    QgsProject.instance().addMapLayer(wrng)
                    path = QgsApplication.qgisSettingsDirPath()
                    path2 = os.path.join(path,"python/plugins/csv_to_map/Warning_Symbols/","ws3.qml")
                    wrng.loadNamedStyle(path2)
                    wrng.triggerRepaint()

                    for layer in QgsProject.instance().mapLayers().values():
                        layer_settings  = QgsPalLayerSettings()
                        text_format = QgsTextFormat()

                        text_format.setFont(QFont("Arial", 6))
                        text_format.setSize(6)

                        buffer_settings = QgsTextBufferSettings()
                        buffer_settings.setEnabled(True)
                        buffer_settings.setSize(0)
                        buffer_settings.setColor(QColor("black"))

                        text_format.setBuffer(buffer_settings)
                        layer_settings.setFormat(text_format)

                        layer_settings.isExpression = True
                        layer_settings.fieldName = "KGISDist_1"
                        layer_settings.placement = 4
                        layer_settings.enabled = True

                        layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                        layer.setLabelsEnabled(True)
                        layer.setLabeling(layer_settings)
                        layer.triggerRepaint()

                    # Adding categories based on attribute table

                    target_field1 = 'csv_file_wrng3'
                    myRangeList1= []

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#A93226"))
                    myRange1 = QgsRendererCategory('RED',symbol, 'WARNING (TAKE ACTION)')
                    myRangeList1.append(myRange1)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#E67E22"))
                    myRange1 = QgsRendererCategory('ORANGE',symbol, 'ALERT (BE PREPARED)')
                    myRangeList1.append(myRange1)
                    
                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#F1C40F"))
                    myRange1 = QgsRendererCategory('YELLOW',symbol, 'WATCH (BE UPDATED)')
                    myRangeList1.append(myRange1)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())     
                    symbol.setColor(QColor("#1E8449"))                        
                    myRange1 = QgsRendererCategory('GREEN', symbol, 'NO WARNING (NO ACTION)')                   
                    myRangeList1.append(myRange1)

                    myRenderer1 = QgsCategorizedSymbolRenderer(target_field1, myRangeList1)                
                    vlayer.setRenderer(myRenderer1)

                    #create project layout

                    layers = QgsProject.instance().mapLayersByName('Districts')     
                    layer = layers[0]
                    project = QgsProject.instance()
                    manager = project.layoutManager()
                    layoutName = 'Layout1'
                    layouts_list = manager.printLayouts()

                    # remove any duplicate layouts
                    
                    for layout in layouts_list:
                        if layout.name() == layoutName:
                            manager.removeLayout(layout)
                    layout = QgsPrintLayout(project)
                    layout.initializeDefaults()
                    layout.setName(layoutName)
                    manager.addLayout(layout)

                    # create map item in the layout
                    
                    map = QgsLayoutItemMap(layout)
                    map.setRect(20, 20, 20, 20)

                    # set the map extent
                    ms = QgsMapSettings()
                    ms.setLayers([layer])
                    rect = QgsRectangle(72.892,11.169,80.180,18.457)
                    rect.scale(1.0)
                    ms.setExtent(rect)
                    map.setExtent(rect)
                    map.setBackgroundColor(QColor(255, 255, 255, 0))
                    layout.addLayoutItem(map)
                    map.attemptMove(QgsLayoutPoint(35,35, QgsUnitTypes.LayoutMillimeters))
                    map.attemptResize(QgsLayoutSize(180, 180, QgsUnitTypes.LayoutMillimeters))

                    # create legend in the layout

                    legend = QgsLayoutItemLegend(layout)
                    legend.setTitle("Level of Warnings")
                    layerTree = QgsLayerTree()
                    layerTree.addLayer(layer)
                    legend.model().setRootGroup(layerTree)
                    layout.addLayoutItem(legend)
                    legend.attemptMove(QgsLayoutPoint(200, 135, QgsUnitTypes.LayoutMillimeters))

                    legend2 = QgsLayoutItemLegend(layout)
                    legend2.setTitle("Legend")
                    layerTree2 = QgsLayerTree()
                    layerTree2.addLayer(wrng)
                    legend2.model().setRootGroup(layerTree2)
                    layout.addLayoutItem(legend2)
                    legend2.attemptMove(QgsLayoutPoint(200, 30, QgsUnitTypes.LayoutMillimeters))

                    # create logo in the layout
                   
                    logo = QgsLayoutItemPicture(layout)
                    logo.setPicturePath(inputLogo)
                    layout.addLayoutItem(logo)
                    logo.attemptResize(QgsLayoutSize(60,60,QgsUnitTypes.LayoutMillimeters))
                    logo.attemptMove(QgsLayoutPoint(15,5,QgsUnitTypes.LayoutMillimeters))

                    # create North Arrow in the layout

                    arrow = QgsLayoutItemPicture(layout)
                    path3 = os.path.join(path,"python/plugins/csv_to_map/arrows/","NorthArrow_11.svg")
                    arrow.setPicturePath(path3)
                    arrow.attemptResize(QgsLayoutSize(20,40,QgsUnitTypes.LayoutMillimeters))
                    arrow.attemptMove(QgsLayoutPoint(250,10,QgsUnitTypes.LayoutMillimeters))
                    layout.addLayoutItem(arrow)

                    # create title in the layout
            
                    title = QgsLayoutItemLabel(layout)
                    title.setText(inputHead + "Weather Warning for the District of Karnataka Valid from " +str((date.today()+ timedelta(2)).strftime('%d.%m.%Y'))+" : 0830 IST to "+str((date.today()+ timedelta(3)).strftime('%d.%m.%Y')) +" : 0830 IST")
                    title.setFont(QFont('Arial', 14))
                    title.adjustSizeToText()
                    layout.addLayoutItem(title)
                    title.attemptResize(QgsLayoutSize(120,50,QgsUnitTypes.LayoutMillimeters))
                    title.attemptMove(QgsLayoutPoint(100, 5, QgsUnitTypes.LayoutMillimeters))

                    layout = manager.layoutByName(layoutName)
                    exporter = QgsLayoutExporter(layout)
                    outputImg = outputMAp.replace(".pdf",".png")
                    exporter.exportToImage(outputImg, QgsLayoutExporter.ImageExportSettings())
                    exporter.exportToPdf(outputMAp, QgsLayoutExporter.PdfExportSettings())

    #Warning Day 4/////////////////////////////////////////////////////////////////////////////////////

            elif dropdown == "Warning Day 4": 

                    #labelling the shapefile

                    uri1 = "file:///" + inputCsv + "?encoding=%s&delimiter=%s&xField=%s&yField=%s&crs=%s" % ("UTF-8",",", "long", "lat","epsg:4326")
                    wrng = QgsVectorLayer(uri1, "Warnings", "delimitedtext")
                    QgsProject.instance().addMapLayer(wrng)
                    path = QgsApplication.qgisSettingsDirPath()
                    path2 = os.path.join(path,"python/plugins/csv_to_map/Warning_Symbols/","ws4.qml")
                    wrng.loadNamedStyle(path2)
                    wrng.triggerRepaint()

                    for layer in QgsProject.instance().mapLayers().values():
                        layer_settings  = QgsPalLayerSettings()
                        text_format = QgsTextFormat()

                        text_format.setFont(QFont("Arial", 6))
                        text_format.setSize(6)

                        buffer_settings = QgsTextBufferSettings()
                        buffer_settings.setEnabled(True)
                        buffer_settings.setSize(0)
                        buffer_settings.setColor(QColor("black"))

                        text_format.setBuffer(buffer_settings)
                        layer_settings.setFormat(text_format)

                        layer_settings.isExpression = True
                        layer_settings.fieldName = "KGISDist_1"
                        layer_settings.placement = 4
                        layer_settings.enabled = True

                        layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                        layer.setLabelsEnabled(True)
                        layer.setLabeling(layer_settings)
                        layer.triggerRepaint()

                    # Adding categories based on attribute table

                    target_field1 = 'csv_file_wrng4'
                    myRangeList1= []

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#A93226"))
                    myRange1 = QgsRendererCategory('RED',symbol, 'WARNING (TAKE ACTION)')
                    myRangeList1.append(myRange1)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#E67E22"))
                    myRange1 = QgsRendererCategory('ORANGE',symbol, 'ALERT (BE PREPARED)')
                    myRangeList1.append(myRange1)
                    
                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#F1C40F"))
                    myRange1 = QgsRendererCategory('YELLOW',symbol, 'WATCH (BE UPDATED)')
                    myRangeList1.append(myRange1)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())     
                    symbol.setColor(QColor("#1E8449"))                        
                    myRange1 = QgsRendererCategory('GREEN', symbol, 'NO WARNING (NO ACTION)')                   
                    myRangeList1.append(myRange1)

                    myRenderer1 = QgsCategorizedSymbolRenderer(target_field1, myRangeList1)                
                    vlayer.setRenderer(myRenderer1)

                    #create project layout

                    layers = QgsProject.instance().mapLayersByName('Districts')     
                    layer = layers[0]
                    project = QgsProject.instance()
                    manager = project.layoutManager()
                    layoutName = 'Layout1'
                    layouts_list = manager.printLayouts()

                    # remove any duplicate layouts
                    
                    for layout in layouts_list:
                        if layout.name() == layoutName:
                            manager.removeLayout(layout)
                    layout = QgsPrintLayout(project)
                    layout.initializeDefaults()
                    layout.setName(layoutName)
                    manager.addLayout(layout)

                    # create map item in the layout
                    
                    map = QgsLayoutItemMap(layout)
                    map.setRect(20, 20, 20, 20)

                    # set the map extent
                    ms = QgsMapSettings()
                    ms.setLayers([layer])
                    rect = QgsRectangle(72.892,11.169,80.180,18.457)
                    rect.scale(1.0)
                    ms.setExtent(rect)
                    map.setExtent(rect)
                    map.setBackgroundColor(QColor(255, 255, 255, 0))
                    layout.addLayoutItem(map)
                    map.attemptMove(QgsLayoutPoint(35,35, QgsUnitTypes.LayoutMillimeters))
                    map.attemptResize(QgsLayoutSize(180, 180, QgsUnitTypes.LayoutMillimeters))

                    # create legend in the layout

                    legend = QgsLayoutItemLegend(layout)
                    legend.setTitle("Level of Warnings")
                    layerTree = QgsLayerTree()
                    layerTree.addLayer(layer)
                    legend.model().setRootGroup(layerTree)
                    layout.addLayoutItem(legend)
                    legend.attemptMove(QgsLayoutPoint(200, 135, QgsUnitTypes.LayoutMillimeters))

                    legend2 = QgsLayoutItemLegend(layout)
                    legend2.setTitle("Legend")
                    layerTree2 = QgsLayerTree()
                    layerTree2.addLayer(wrng)
                    legend2.model().setRootGroup(layerTree2)
                    layout.addLayoutItem(legend2)
                    legend2.attemptMove(QgsLayoutPoint(200, 30, QgsUnitTypes.LayoutMillimeters))

                    # create logo in the layout
                   
                    logo = QgsLayoutItemPicture(layout)
                    logo.setPicturePath(inputLogo)
                    layout.addLayoutItem(logo)
                    logo.attemptResize(QgsLayoutSize(60,60,QgsUnitTypes.LayoutMillimeters))
                    logo.attemptMove(QgsLayoutPoint(15,5,QgsUnitTypes.LayoutMillimeters))

                    # create North Arrow in the layout

                    arrow = QgsLayoutItemPicture(layout)
                    path3 = os.path.join(path,"python/plugins/csv_to_map/arrows/","NorthArrow_11.svg")
                    arrow.setPicturePath(path3)
                    arrow.attemptResize(QgsLayoutSize(20,40,QgsUnitTypes.LayoutMillimeters))
                    arrow.attemptMove(QgsLayoutPoint(250,10,QgsUnitTypes.LayoutMillimeters))
                    layout.addLayoutItem(arrow)

                    # create title in the layout
            
                    title = QgsLayoutItemLabel(layout)
                    title.setText(inputHead + "Weather Warning for the District of Karnataka Valid from " +str((date.today()+ timedelta(3)).strftime('%d.%m.%Y'))+" : 0830 IST to "+str((date.today()+ timedelta(4)).strftime('%d.%m.%Y')) +" : 0830 IST")
                    title.setFont(QFont('Arial', 14))
                    title.adjustSizeToText()
                    layout.addLayoutItem(title)
                    title.attemptResize(QgsLayoutSize(120,50,QgsUnitTypes.LayoutMillimeters))
                    title.attemptMove(QgsLayoutPoint(100, 5, QgsUnitTypes.LayoutMillimeters))

                    layout = manager.layoutByName(layoutName)
                    exporter = QgsLayoutExporter(layout)
                    outputImg = outputMAp.replace(".pdf",".png")
                    exporter.exportToImage(outputImg, QgsLayoutExporter.ImageExportSettings())
                    exporter.exportToPdf(outputMAp, QgsLayoutExporter.PdfExportSettings())

    #Warning Day 5/////////////////////////////////////////////////////////////////////////////////////

            elif dropdown == "Warning Day 5": 

                    #labelling the shapefile

                    uri1 = "file:///" + inputCsv + "?encoding=%s&delimiter=%s&xField=%s&yField=%s&crs=%s" % ("UTF-8",",", "long", "lat","epsg:4326")
                    wrng = QgsVectorLayer(uri1, "Warnings", "delimitedtext")
                    QgsProject.instance().addMapLayer(wrng)
                    path = QgsApplication.qgisSettingsDirPath()
                    path2 = os.path.join(path,"python/plugins/csv_to_map/Warning_Symbols/","ws5.qml")
                    wrng.loadNamedStyle(path2)
                    wrng.triggerRepaint()

                    for layer in QgsProject.instance().mapLayers().values():
                        layer_settings  = QgsPalLayerSettings()
                        text_format = QgsTextFormat()

                        text_format.setFont(QFont("Arial", 6))
                        text_format.setSize(6)

                        buffer_settings = QgsTextBufferSettings()
                        buffer_settings.setEnabled(True)
                        buffer_settings.setSize(0)
                        buffer_settings.setColor(QColor("black"))

                        text_format.setBuffer(buffer_settings)
                        layer_settings.setFormat(text_format)

                        layer_settings.isExpression = True
                        layer_settings.fieldName = "KGISDist_1"
                        layer_settings.placement = 4
                        layer_settings.enabled = True

                        layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                        layer.setLabelsEnabled(True)
                        layer.setLabeling(layer_settings)
                        layer.triggerRepaint()

                    # Adding categories based on attribute table

                    target_field1 = 'csv_file_wrng5'
                    myRangeList1= []

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#A93226"))
                    myRange1 = QgsRendererCategory('RED',symbol, 'WARNING (TAKE ACTION)')
                    myRangeList1.append(myRange1)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#E67E22"))
                    myRange1 = QgsRendererCategory('ORANGE',symbol, 'ALERT (BE PREPARED)')
                    myRangeList1.append(myRange1)
                    
                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
                    symbol.setColor(QColor("#F1C40F"))
                    myRange1 = QgsRendererCategory('YELLOW',symbol, 'WATCH (BE UPDATED)')
                    myRangeList1.append(myRange1)

                    symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())     
                    symbol.setColor(QColor("#1E8449"))                        
                    myRange1 = QgsRendererCategory('GREEN', symbol, 'NO WARNING (NO ACTION)')                   
                    myRangeList1.append(myRange1)

                    myRenderer1 = QgsCategorizedSymbolRenderer(target_field1, myRangeList1)                
                    vlayer.setRenderer(myRenderer1)

                    #create project layout

                    layers = QgsProject.instance().mapLayersByName('Districts')     
                    layer = layers[0]
                    project = QgsProject.instance()
                    manager = project.layoutManager()
                    layoutName = 'Layout1'
                    layouts_list = manager.printLayouts()

                    # remove any duplicate layouts
                    
                    for layout in layouts_list:
                        if layout.name() == layoutName:
                            manager.removeLayout(layout)
                    layout = QgsPrintLayout(project)
                    layout.initializeDefaults()
                    layout.setName(layoutName)
                    manager.addLayout(layout)

                    # create map item in the layout
                    
                    map = QgsLayoutItemMap(layout)
                    map.setRect(20, 20, 20, 20)

                    # set the map extent
                    ms = QgsMapSettings()
                    ms.setLayers([layer])
                    rect = QgsRectangle(72.892,11.169,80.180,18.457)
                    rect.scale(1.0)
                    ms.setExtent(rect)
                    map.setExtent(rect)
                    map.setBackgroundColor(QColor(255, 255, 255, 0))
                    layout.addLayoutItem(map)
                    map.attemptMove(QgsLayoutPoint(35,35, QgsUnitTypes.LayoutMillimeters))
                    map.attemptResize(QgsLayoutSize(180, 180, QgsUnitTypes.LayoutMillimeters))

                    # create legend in the layout

                    legend = QgsLayoutItemLegend(layout)
                    legend.setTitle("Level of Warnings")
                    layerTree = QgsLayerTree()
                    layerTree.addLayer(layer)
                    legend.model().setRootGroup(layerTree)
                    layout.addLayoutItem(legend)
                    legend.attemptMove(QgsLayoutPoint(200, 135, QgsUnitTypes.LayoutMillimeters))

                    legend2 = QgsLayoutItemLegend(layout)
                    legend2.setTitle("Legend")
                    layerTree2 = QgsLayerTree()
                    layerTree2.addLayer(wrng)
                    legend2.model().setRootGroup(layerTree2)
                    layout.addLayoutItem(legend2)
                    legend2.attemptMove(QgsLayoutPoint(200, 30, QgsUnitTypes.LayoutMillimeters))

                    # create logo in the layout
                   
                    logo = QgsLayoutItemPicture(layout)
                    logo.setPicturePath(inputLogo)
                    layout.addLayoutItem(logo)
                    logo.attemptResize(QgsLayoutSize(60,60,QgsUnitTypes.LayoutMillimeters))
                    logo.attemptMove(QgsLayoutPoint(15,5,QgsUnitTypes.LayoutMillimeters))

                    # create North Arrow in the layout

                    arrow = QgsLayoutItemPicture(layout)
                    path3 = os.path.join(path,"python/plugins/csv_to_map/arrows/","NorthArrow_11.svg")
                    arrow.setPicturePath(path3)
                    arrow.attemptResize(QgsLayoutSize(20,40,QgsUnitTypes.LayoutMillimeters))
                    arrow.attemptMove(QgsLayoutPoint(250,10,QgsUnitTypes.LayoutMillimeters))
                    layout.addLayoutItem(arrow)

                    # create title in the layout
            
                    title = QgsLayoutItemLabel(layout)
                    title.setText(inputHead + "Weather Warning for the District of Karnataka Valid from " +str((date.today()+ timedelta(4)).strftime('%d.%m.%Y'))+" : 0830 IST to "+str((date.today()+ timedelta(5)).strftime('%d.%m.%Y')) +" : 0830 IST")
                    title.setFont(QFont('Arial', 14))
                    title.adjustSizeToText()
                    layout.addLayoutItem(title)
                    title.attemptResize(QgsLayoutSize(120,50,QgsUnitTypes.LayoutMillimeters))
                    title.attemptMove(QgsLayoutPoint(100, 5, QgsUnitTypes.LayoutMillimeters))

                    layout = manager.layoutByName(layoutName)
                    exporter = QgsLayoutExporter(layout)
                    outputImg = outputMAp.replace(".pdf",".png")
                    exporter.exportToImage(outputImg, QgsLayoutExporter.ImageExportSettings())
                    exporter.exportToPdf(outputMAp, QgsLayoutExporter.PdfExportSettings())

    #Highway Forecast/////////////////////////////////////////////////////////////////////////////////////

            elif dropdown == "Highway Forecast": 

                    #labelling the shapefile
                    path1 = QgsApplication.qgisSettingsDirPath()
                    highway_path = os.path.join(path1,"python/plugins/csv_to_map/highway/","highway_NH.shp")
                    high = QgsVectorLayer(highway_path, "Highways", "ogr")
                    QgsProject.instance().addMapLayer(high)

                    path2 = QgsApplication.qgisSettingsDirPath()
                    kar = os.path.join(path2,"python/plugins/csv_to_map/highway/","kar_outline.shp")
                    kar_out = QgsVectorLayer(kar, "Outline", "ogr")
                    QgsProject.instance().addMapLayer(kar_out)

                    path4 = QgsApplication.qgisSettingsDirPath()
                    kar_sym = os.path.join(path4,"python/plugins/csv_to_map/highway/","kar_out.qml")
                    kar_out.loadNamedStyle(kar_sym)
                    kar_out.triggerRepaint()

                    path3 = QgsApplication.qgisSettingsDirPath()
                    hw_sym = os.path.join(path3,"python/plugins/csv_to_map/highway/","hw_sym.qml")
                    vlayer.loadNamedStyle(hw_sym)
                    vlayer.triggerRepaint()

                    for layer in QgsProject.instance().mapLayers().values():
                        layer_settings  = QgsPalLayerSettings()
                        text_format = QgsTextFormat()

                        text_format.setFont(QFont("Arial", 10))
                        text_format.setSize(10)

                        buffer_settings = QgsTextBufferSettings()
                        buffer_settings.setEnabled(True)
                        buffer_settings.setSize(0)
                        buffer_settings.setColor(QColor("black"))

                        text_format.setBuffer(buffer_settings)
                        layer_settings.setFormat(text_format)

                        layer_settings.isExpression = True
                        layer_settings.fieldName = "Junction || '\n' || csv_file_maxTemp || '\n' || csv_file_minTemp"
                        layer_settings.placement = 4
                        layer_settings.enabled = True

                        layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                        layer.setLabelsEnabled(True)
                        layer.setLabeling(layer_settings)
                        layer.triggerRepaint()

                    # Adding categories based on attribute table                           

                    #create project layout

                    layers = QgsProject.instance().mapLayersByName('Districts')
                    layer = layers[0]
                    project = QgsProject.instance()
                    manager = project.layoutManager()
                    layoutName = 'Layout1'
                    layouts_list = manager.printLayouts()

                    # remove any duplicate layouts
                    
                    for layout in layouts_list:
                        if layout.name() == layoutName:
                            manager.removeLayout(layout)
                    layout = QgsPrintLayout(project)
                    layout.initializeDefaults()
                    layout.setName(layoutName)
                    manager.addLayout(layout)

                    # create map item in the layout
                    
                    map = QgsLayoutItemMap(layout)
                    map.setRect(20, 20, 20, 20)

                    # set the map extent

                    ms = QgsMapSettings()
                    ms.setLayers([layer]) 
                    rect = QgsRectangle(ms.fullExtent())
                    rect.scale(2.5)
                    ms.setExtent(rect)
                    map.setExtent(rect)
                    map.setBackgroundColor(QColor(255, 255, 255, 0))
                    layout.addLayoutItem(map)
                    map.attemptMove(QgsLayoutPoint(35, 20, QgsUnitTypes.LayoutMillimeters))
                    map.attemptResize(QgsLayoutSize(180, 180, QgsUnitTypes.LayoutMillimeters))

                    # create legend in the layout

                    legend = QgsLayoutItemLegend(layout)
                    legend.setTitle("Legend")
                    layerTree = QgsLayerTree()
                    layerTree.addLayer(layer)
                    legend.model().setRootGroup(layerTree)
                    layout.addLayoutItem(legend)
                    legend.attemptMove(QgsLayoutPoint(215, 70, QgsUnitTypes.LayoutMillimeters))

                    # create logo in the layout
                   
                    logo = QgsLayoutItemPicture(layout)
                    logo.setPicturePath(inputLogo)
                    layout.addLayoutItem(logo)
                    logo.attemptResize(QgsLayoutSize(60,60,QgsUnitTypes.LayoutMillimeters))
                    logo.attemptMove(QgsLayoutPoint(15,5,QgsUnitTypes.LayoutMillimeters))

                    # create North Arrow in the layout

                    arrow = QgsLayoutItemPicture(layout)
                    path6 = QgsApplication.qgisSettingsDirPath()
                    path5 = os.path.join(path6,"python/plugins/csv_to_map/arrows/","NorthArrow_11.svg")
                    arrow.setPicturePath(path5)
                    arrow.attemptResize(QgsLayoutSize(20,40,QgsUnitTypes.LayoutMillimeters))
                    arrow.attemptMove(QgsLayoutPoint(250,10,QgsUnitTypes.LayoutMillimeters))
                    layout.addLayoutItem(arrow)

                    # create title in the layout
            
                    title = QgsLayoutItemLabel(layout)
                    title.setText("Rainfall forecast of National Highways in Karnataka State valid from " +str(date.today().strftime('%d.%m.%Y'))+" : 0830 IST to "+str((date.today()+ timedelta(1)).strftime('%d.%m.%Y')) +" : 0830 IST")
                    title.setFont(QFont('Arial', 14))
                    title.adjustSizeToText()
                    layout.addLayoutItem(title)
                    title.attemptResize(QgsLayoutSize(135,50,QgsUnitTypes.LayoutMillimeters))
                    title.attemptMove(QgsLayoutPoint(85, 5, QgsUnitTypes.LayoutMillimeters))

                    title2 = QgsLayoutItemLabel(layout)
                    title2.setText(inputHead)
                    title2.setFont(QFont('Arial', 14))
                    title2.adjustSizeToText()
                    layout.addLayoutItem(title2)
                    title2.attemptResize(QgsLayoutSize(125,170,QgsUnitTypes.LayoutMillimeters))
                    title2.attemptMove(QgsLayoutPoint(100, 200, QgsUnitTypes.LayoutMillimeters))

                    layout = manager.layoutByName(layoutName)
                    exporter = QgsLayoutExporter(layout)
                    outputImg = outputMAp.replace(".pdf",".png")
                    exporter.exportToImage(outputImg, QgsLayoutExporter.ImageExportSettings())
                    exporter.exportToPdf(outputMAp, QgsLayoutExporter.PdfExportSettings())
